service: cryptopage-api

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage}
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "apigateway:GET"
      Resource:
        - "arn:aws:apigateway:${self:provider.region}::/restapis*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
  #environment:
  #  TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
plugins:
  - serverless-webpack
  #- serverless-plugin-typescript
  - serverless-offline
  - serverless-aws-documentation
  #- serverless-domain-manager
  - serverless-stack-output

# package:
  # include:
  #   - src/**/!(*.spec).js
  #   - node_modules/shortid/**/*.js
  # exclude:
  #   - node_modules/**/*
resources:
  Resources:
    CryptoTicketDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
functions:
  getSwaggerJson:
    handler: src/swagger/swagger.getSwaggerJson
    description: Returns the Swagger documentation of the API in JSON format.

    environment:
      REGION_NAME: ${self:provider.region}
      REST_API_NAME: ${self:service}
      STAGE_NAME: ${self:provider.stage}
      API_INFO_VERSION: ${file(./swagger/documentation.yml):api.info.version}
      API_INFO_TITLE: ${file(./swagger/documentation.yml):api.info.title}

    events:
      - http:
          path: swagger.json
          method: get
          cors: true

  getHealthCheck:
    handler: src/health/health.getHealthCheck
    description: Returns the result of a quick health check of the API.

    events:
      - http:
          path: health/check
          method: get
          cors: true
          documentation:
            summary: Returns the result of a quick health check of the API.
            tags:
              - Health
            description: Returns the result of a quick health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheck
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  getHealthCheckDetailed:
    handler: src/health/health.getHealthCheckDetailed
    description: Returns the result of a detailed health check of the API.

    events:
      - http:
          path: health/detailed
          method: get
          cors: true
          documentation:
            summary: Returns the result of a detailed health check of the API.
            tags:
              - Health
            description: Returns the result of a detailed health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheckDetailed
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  getCity:
    handler: src/cities/cities.getCity
    description: Returns a single city.

    environment:
      DEFAULT_COUNTRY: Hungary

    events:
      - http:
          path: cities/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: Get a city.
            tags:
              - City
            description: Returns the specified city.
            pathParams:
              - name: id
                description: The unique identifier of the city to retrieve.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetCityResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  createCryptoTicket:
    handler: src/crypto/crypto.createCryptoTicket
    description: Create and encrypt the ticket
    environment:
      TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
    events:
      - http:
          path: crypto/create
          method: post
          cors: true
          documentation:
            summary: Create the crypto ticket.
            tags:
              - Crypto
            description: Returns the result of ticket token name.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": CreateCryptoTicketResponse
              - ${file(./swagger/error-responses/internal-server-error.yml)}
custom:
  documentation: ${file(./swagger/documentation.yml)}
  # customDomain:
  #   basePath: "api"
  #   domainName: serverless-sample.balassy.me
  #   certificateName: serverless-sample.balassy.me
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  output:
    file: .serverless/output.json
